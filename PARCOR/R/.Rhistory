#############################################
library('PARCOR')
library('Rcpp')
gen.sim.data <- function(I, n_t, phi){
x1 <- 1
x2 <- 2
t <- 1:n_t
x.sim <- matrix(nrow = I, ncol = n_t)
x.sim[1, 1] <- x1
x.sim[1, 2] <- x2
x.sim[2, 1] <- x1
x.sim[2, 2] <- x2
rt1 <- seq(0.85, 0.95, length.out = n_t)
rt2 <- seq(0.95, 0.85, length.out = n_t)
lt1 <- seq(5, 20, length.out = n_t)
lt2 <- seq(15, 5, length.out = n_t)
at11 <- rt1*cos(2*pi/lt1)
at22 <- rt2*cos(2*pi/lt2)
at12 <- rt1^2
at21 <- rt2^2
At1 <- rep(list(NA), n_t)
for(i in 3:n_t){
At1[[i]] <- matrix(c(at11[i], 0, phi, at22[i]), nrow = 2, ncol = 2)
At2 <- matrix(c(-at12[i], 0, 0, -at21[i]), 2, 2)
x.sim[, i] <- At1[[i]]%*%x.sim[, i - 1, drop = FALSE] +  At2%*%x.sim[, i - 2, drop = FALSE] + matrix(rnorm(2, 0, 1), nrow = 2, ncol = 1)
#x.sim[, i] <- At1[[i]]%*%x.sim[, i - 1, drop = FALSE] + matrix(rnorm(2, 0, 1), nrow = 2, ncol = 1)
}
return(x.sim)
}
detach(PARCOR)
detach("PARCOR")
detach("package:PARCOR", unload = TRUE)
remove.packages("PARCOR")
library(PARCOR)
### true ar parameters
##### This setting for drawing the true spectral density plot ######
n_t <- 1024
rt1 <- seq(0.85, 0.95, length.out = n_t)
rt2 <- seq(0.95, 0.85, length.out = n_t)
lt1 <- seq(5, 20, length.out = n_t)
lt2 <- seq(15, 5, length.out = n_t)
at11 <- rt1*cos(2*pi/lt1)
at22 <- rt2*cos(2*pi/lt2)
at12 <- rt1^2
at21 <- rt2^2
true_phi1 <- array(0, dim = c(4, 1024, 2))
true_phi1[, , 1] <- rbind(at11, 0, 0, at22)
true_phi1[, , 2] <- rbind(-at12, rep(0, 1024), rep(0, 1024), -at21)
############### Fit PARCOR coefficients model with Rcpp codes ###########
#### initialize the parameters ######
n_t <- 1024
n_I <- 2
V1t <- diag(2)
G <- diag(4)
n_0 <- 1
S_0 <- V1t
##### prior parameters ######
mk_0 <- matrix(c(0, 0, 0, 0), ncol = 1)
Ck_0 <- diag(4)
##### potential model order ######
P <- 5L
##### discount factors ######
grid_seq <- seq(0.997, 1, 0.001)
tmp_dim <- dim(as.matrix(expand.grid(grid_seq, grid_seq)))
delta_cpp <- array(dim = c(tmp_dim[1], 4, P))
delta_TVVAR <- rep(list(NA), P)
## discount factor for PARCOR model
for(i in 1:P){
delta_cpp[, , i] <- cbind(as.matrix(expand.grid(grid_seq, grid_seq)),
as.matrix(expand.grid(grid_seq, grid_seq)))
}
result_sim1_unkn <- run_parcor(F1 = x.sim1[[i]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P)
i <- 1
x.sim1[[i]] <- gen.sim.data(I = 2, n_t = 1024, phi = 0)
x.sim1 <- rep(list(NA), n.sim)
for(i in 1:n.sim){
x.sim1[[i]] <- gen.sim.data(I = 2, n_t = 1024, phi = 0)
}
###### when phi_{1, 1, 2} = 0 #########
###### fit TVVAR model #####
n.sim <- 50
x.sim1 <- rep(list(NA), n.sim)
for(i in 1:n.sim){
x.sim1[[i]] <- gen.sim.data(I = 2, n_t = 1024, phi = 0)
}
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P, sample_size = 1000, chains = 1, DIC = TRUE, backward = TRUE, uncertainty = TRUE)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
backward = TRUE, uncertainty = FALSE)
result_sim1_unkn$Cnt_fwd
library(pryr)
object_size(rep(list(NA), P))
library(PARCOR)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
backward = TRUE, uncertainty = FALSE)
result_sim1_unkn$Cnt_fwd
library(PARCOR)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
backward = TRUE, uncertainty = FALSE)
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
backward = TRUE, uncertainty = FALSE)
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = FALSE)
run_parcor_parallel <- function(F1, G, mk_0, Ck_0, n_0, S_0, delta,
P, sample_size = 200L, chains = 1, DIC = TRUE,
uncertainty = TRUE){
n_t <- ncol(F1)
n_I <- nrow(F1)
n_I2 <- nrow(G)
n_delta <- nrow(delta[, , 1])
sfInit(parallel = TRUE, cpus = 2, type = "SOCK")
sfLibrary(PARCOR)
F1_fwd <- F1
F1_bwd <- F1
phi_fwd <- array(NA, dim = c(n_I2, n_t, P))
phi_bwd <- array(NA, dim = c(n_I2, n_t, P))
St_fwd <- rep(list(NA), P)
St_bwd <- rep(list(NA), P)
Cnt_fwd <- rep(list(NA), P)
Cnt_bwd <- rep(list(NA), P)
ar_coef_prev <- list(NA)
ar_coef <- rep(list(NA), P)
delta_fwd <- matrix(NA, nrow = P, ncol = n_I2)
delta_bwd <- matrix(NA, nrow = P, ncol = n_I2)
val_DIC <- numeric(P)
ll_DIC <- numeric(P)
es_DIC <- numeric(P)
ll_fwd <- numeric(P)
ll_bwd <- numeric(P)
ll <- matrix(NA, nrow = P, ncol = n_delta)
sfExportAll()
for(i in 1:P){
sfExport("F1_fwd", "F1_bwd", "i")
res <- sfLapply(x = c(1, 0), fun = function(x) filter_smooth(F1_fwd, F1_bwd, G, mk_0, Ck_0, n_0, S_0, i, delta[, , i],
x, P, x, sample_size, chains))
tmp_fwd <- res[[1]]
tmp_bwd <- res[[2]]
delta_fwd[i, ] <- tmp_fwd$delta_min
delta_bwd[i, ] <- tmp_bwd$delta_min
ll_DIC[i] <- tmp_fwd$ll_DIC
es_DIC[i] <- tmp_fwd$ES_mean
St_fwd[[i]] <- tmp_fwd$St
St_bwd[[i]] <- tmp_bwd$St
if(uncertainty){
Cnt_fwd[[i]] <- tmp_fwd$Cnt
Cnt_bwd[[i]] <- tmp_bwd$Cnt
}
F1_fwd <- tmp_fwd$F1new
F1_bwd <- tmp_bwd$F1new
phi_fwd[, , i] <- tmp_fwd$mnt
phi_bwd[, , i] <- tmp_bwd$mnt
ll_fwd[i] <- tmp_fwd$ll_max
ll_bwd[i] <- tmp_bwd$ll_max
ll[i, ] <- tmp_fwd$ll
cat("iterations: ", i, "/", P, "\n")
}
ar_coef <- PAR_to_AR_fun(phi_fwd, phi_bwd, n_I)
val_DIC <- 2*(cumsum(es_DIC) - ll_DIC)
sfStop()
return(list("phi_fwd" = phi_fwd,
"phi_bwd" = phi_bwd,
"St_fwd" = St_fwd,
"St_bwd" = St_bwd,
"Cnt_fwd" = Cnt_fwd,
"Cnt_bwd" = Cnt_bwd,
"ll_fwd" = ll_fwd,
"ll_bwd" = ll_bwd,
"delta_fwd" = delta_fwd,
"delta_bwd" = delta_bwd,
"ll" = ll,
"ar_coef" = ar_coef,
"DIC" = val_DIC,
"ES_mean" = es_DIC,
"ll_DIC" = ll_DIC))
}
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = FALSE)
result_sim1_unkn$Cnt_fwd
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = TRUE)
result_sim1_unkn$Cnt_fwd
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = TRUE)
PAR_to_AR_fun
library(PARCOR)
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = TRUE)
library(PARCOR)
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = TRUE)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE, backward = TRUE)
G
delta_cpp
filter_smooth(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]],
G = G, mk_0 = mk_0, Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = delta[, , 1], type_num = 1, P = 5, DIC = TRUE, sample_size = 1000, chains = 5 )
filter_smooth(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]],
G = G, mk_0 = mk_0, Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = delta_cpp[, , 1], type_num = 1, P = 5, DIC = TRUE, sample_size = 1000, chains = 5 )
library(PARCOR)
filter_smooth(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]],
G = G, mk_0 = mk_0, Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = delta_cpp[, , 1], type_num = 1, P = 5, DIC = TRUE, sample_size = 1000, chains = 5 )
rm(run_parcor_parallel)
library(PARCOR)
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = TRUE)
filter_smooth(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]],
G = G, mk_0 = mk_0, Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0,
m = 1, delta = delta_cpp[, , 1], type_num = 1, P = 5,
DIC = TRUE, sample_size = 1000, chains = 5 )
filter(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]], G = G, mk_0 = mk_0,
Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = delta_cpp[1, , 1], type_num = 1,
pp = 5, n_t = 1024, n_I = 2, n_I2 = 4)
filter(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]], G = G, mk_0 = mk_0,
Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = delta_cpp[1, , 1, drop= FALSE], type_num = 1,
pp = 5, n_t = 1024, n_I = 2, n_I2 = 4)
delta_cpp[1, , 1, drop= FALSE]
delta_cpp[1, , 1]
filter(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]], G = G, mk_0 = mk_0,
Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = as.matrix(delta_cpp[1, , 1]), type_num = 1,
pp = 5, n_t = 1024, n_I = 2, n_I2 = 4)
library(PARCOR)
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = TRUE)
filter_smooth(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]],
G = G, mk_0 = mk_0, Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0,
m = 1, delta = delta_cpp[, , 1], type_num = 1, P = 5,
DIC = TRUE, sample_size = 1000, chains = 5 )
filter(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]], G = G, mk_0 = mk_0,
Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = as.matrix(delta_cpp[1, , 1]), type_num = 1,
pp = 5, n_t = 1024, n_I = 2, n_I2 = 4)
filter(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]], G = G, mk_0 = mk_0,
Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = as.matrix(delta_cpp[1, , 1]), type_num = 1,
P = 5, n_t = 1024, n_I = 2, n_I2 = 4)
filter(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]], G = G, mk_0 = mk_0,
Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = delta_cpp[1, , 1], type_num = 1,
P = 5, n_t = 1024, n_I = 2, n_I2 = 4)
filter(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]], G = G, mk_0 = mk_0,
Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = delta_cpp[1, , 1], type_num = 1,
P = 5, n_t = 1024, n_I = 2, n_I2 = 4)
filter_smooth(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]],
G = G, mk_0 = mk_0, Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0,
m = 1, delta = delta_cpp[1, , 1], type_num = 1, P = 5,
DIC = TRUE, sample_size = 1000, chains = 5 )
filter_smooth(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]],
G = G, mk_0 = mk_0, Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0,
m = 1, delta = delta_cpp[, , 1], type_num = 1, P = 5,
DIC = TRUE, sample_size = 1000, chains = 5 )
library(PARCOR)
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = TRUE)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE, backward = TRUE)
filter_smooth(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]],
G = G, mk_0 = mk_0, Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0,
m = 1, delta = delta_cpp[, , 1], type_num = 1, P = 5,
DIC = TRUE, sample_size = 1000, chains = 5 )
filter(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]], G = G, mk_0 = mk_0,
Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = delta_cpp[1, , 1], type_num = 1,
P = 5, n_t = 1024, n_I = 2, n_I2 = 4)
test <- filter(F1_fwd = x.sim1[[1]], F1_bwd = x.sim1[[1]], G = G, mk_0 = mk_0,
Ck_0 = Ck_0, n_0 = n_0, S_0 = S_0, m = 1, delta = delta_cpp[1, , 1], type_num = 1,
P = 5, n_t = 1024, n_I = 2, n_I2 = 4)
is.array(test$Ct)
library(PARCOR)
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = TRUE)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE, backward = TRUE)
result_sim1_unkn <- run_parcor(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE, backward = TRUE)
result_sim1_unkn <- run_parcor_parallel(F1 = x.sim1[[1]], G = G, mk_0 = mk_0, Ck_0 = Ck_0,
n_0 = n_0, S_0 = S_0, delta = delta_cpp, P = P,
sample_size = 1000, chains = 1, DIC = TRUE,
uncertainty = TRUE)
result_sim1_unkn$ll_fwd
